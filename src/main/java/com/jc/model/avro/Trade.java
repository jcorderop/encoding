/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jc.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5908458586031459594L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.jc.model.avro\",\"fields\":[{\"name\":\"tradeId\",\"type\":\"long\"},{\"name\":\"customerId\",\"type\":\"long\"},{\"name\":\"qty\",\"type\":\"long\"},{\"name\":\"tradeType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"TradeType\",\"symbols\":[\"Buy\",\"Sell\"]}]},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"exchange\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<Trade>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trade> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trade>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trade to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trade from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trade instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long tradeId;
  private long customerId;
  private long qty;
  private com.jc.model.avro.TradeType tradeType;
  private java.lang.CharSequence symbol;
  private java.lang.CharSequence exchange;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param tradeId The new value for tradeId
   * @param customerId The new value for customerId
   * @param qty The new value for qty
   * @param tradeType The new value for tradeType
   * @param symbol The new value for symbol
   * @param exchange The new value for exchange
   */
  public Trade(java.lang.Long tradeId, java.lang.Long customerId, java.lang.Long qty, com.jc.model.avro.TradeType tradeType, java.lang.CharSequence symbol, java.lang.CharSequence exchange) {
    this.tradeId = tradeId;
    this.customerId = customerId;
    this.qty = qty;
    this.tradeType = tradeType;
    this.symbol = symbol;
    this.exchange = exchange;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tradeId;
    case 1: return customerId;
    case 2: return qty;
    case 3: return tradeType;
    case 4: return symbol;
    case 5: return exchange;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tradeId = (java.lang.Long)value$; break;
    case 1: customerId = (java.lang.Long)value$; break;
    case 2: qty = (java.lang.Long)value$; break;
    case 3: tradeType = (com.jc.model.avro.TradeType)value$; break;
    case 4: symbol = (java.lang.CharSequence)value$; break;
    case 5: exchange = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tradeId' field.
   * @return The value of the 'tradeId' field.
   */
  public long getTradeId() {
    return tradeId;
  }


  /**
   * Sets the value of the 'tradeId' field.
   * @param value the value to set.
   */
  public void setTradeId(long value) {
    this.tradeId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public long getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public long getQty() {
    return qty;
  }


  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(long value) {
    this.qty = value;
  }

  /**
   * Gets the value of the 'tradeType' field.
   * @return The value of the 'tradeType' field.
   */
  public com.jc.model.avro.TradeType getTradeType() {
    return tradeType;
  }


  /**
   * Sets the value of the 'tradeType' field.
   * @param value the value to set.
   */
  public void setTradeType(com.jc.model.avro.TradeType value) {
    this.tradeType = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'exchange' field.
   * @return The value of the 'exchange' field.
   */
  public java.lang.CharSequence getExchange() {
    return exchange;
  }


  /**
   * Sets the value of the 'exchange' field.
   * @param value the value to set.
   */
  public void setExchange(java.lang.CharSequence value) {
    this.exchange = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.jc.model.avro.Trade.Builder newBuilder() {
    return new com.jc.model.avro.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.jc.model.avro.Trade.Builder newBuilder(com.jc.model.avro.Trade.Builder other) {
    if (other == null) {
      return new com.jc.model.avro.Trade.Builder();
    } else {
      return new com.jc.model.avro.Trade.Builder(other);
    }
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.jc.model.avro.Trade.Builder newBuilder(com.jc.model.avro.Trade other) {
    if (other == null) {
      return new com.jc.model.avro.Trade.Builder();
    } else {
      return new com.jc.model.avro.Trade.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trade instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private long tradeId;
    private long customerId;
    private long qty;
    private com.jc.model.avro.TradeType tradeType;
    private java.lang.CharSequence symbol;
    private java.lang.CharSequence exchange;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jc.model.avro.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tradeType)) {
        this.tradeType = data().deepCopy(fields()[3].schema(), other.tradeType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.exchange)) {
        this.exchange = data().deepCopy(fields()[5].schema(), other.exchange);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jc.model.avro.Trade other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.tradeId)) {
        this.tradeId = data().deepCopy(fields()[0].schema(), other.tradeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qty)) {
        this.qty = data().deepCopy(fields()[2].schema(), other.qty);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tradeType)) {
        this.tradeType = data().deepCopy(fields()[3].schema(), other.tradeType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.symbol)) {
        this.symbol = data().deepCopy(fields()[4].schema(), other.symbol);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.exchange)) {
        this.exchange = data().deepCopy(fields()[5].schema(), other.exchange);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'tradeId' field.
      * @return The value.
      */
    public long getTradeId() {
      return tradeId;
    }


    /**
      * Sets the value of the 'tradeId' field.
      * @param value The value of 'tradeId'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setTradeId(long value) {
      validate(fields()[0], value);
      this.tradeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeId' field has been set.
      * @return True if the 'tradeId' field has been set, false otherwise.
      */
    public boolean hasTradeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tradeId' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearTradeId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public long getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setCustomerId(long value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public long getQty() {
      return qty;
    }


    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setQty(long value) {
      validate(fields()[2], value);
      this.qty = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearQty() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeType' field.
      * @return The value.
      */
    public com.jc.model.avro.TradeType getTradeType() {
      return tradeType;
    }


    /**
      * Sets the value of the 'tradeType' field.
      * @param value The value of 'tradeType'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setTradeType(com.jc.model.avro.TradeType value) {
      validate(fields()[3], value);
      this.tradeType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeType' field has been set.
      * @return True if the 'tradeType' field has been set, false otherwise.
      */
    public boolean hasTradeType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tradeType' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearTradeType() {
      tradeType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.symbol = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchange' field.
      * @return The value.
      */
    public java.lang.CharSequence getExchange() {
      return exchange;
    }


    /**
      * Sets the value of the 'exchange' field.
      * @param value The value of 'exchange'.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder setExchange(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.exchange = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'exchange' field has been set.
      * @return True if the 'exchange' field has been set, false otherwise.
      */
    public boolean hasExchange() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'exchange' field.
      * @return This builder.
      */
    public com.jc.model.avro.Trade.Builder clearExchange() {
      exchange = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.tradeId = fieldSetFlags()[0] ? this.tradeId : (java.lang.Long) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.Long) defaultValue(fields()[1]);
        record.qty = fieldSetFlags()[2] ? this.qty : (java.lang.Long) defaultValue(fields()[2]);
        record.tradeType = fieldSetFlags()[3] ? this.tradeType : (com.jc.model.avro.TradeType) defaultValue(fields()[3]);
        record.symbol = fieldSetFlags()[4] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.exchange = fieldSetFlags()[5] ? this.exchange : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.tradeId);

    out.writeLong(this.customerId);

    out.writeLong(this.qty);

    if (this.tradeType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.tradeType.ordinal());
    }

    out.writeString(this.symbol);

    out.writeString(this.exchange);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tradeId = in.readLong();

      this.customerId = in.readLong();

      this.qty = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.tradeType = null;
      } else {
        this.tradeType = com.jc.model.avro.TradeType.values()[in.readEnum()];
      }

      this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);

      this.exchange = in.readString(this.exchange instanceof Utf8 ? (Utf8)this.exchange : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tradeId = in.readLong();
          break;

        case 1:
          this.customerId = in.readLong();
          break;

        case 2:
          this.qty = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tradeType = null;
          } else {
            this.tradeType = com.jc.model.avro.TradeType.values()[in.readEnum()];
          }
          break;

        case 4:
          this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8)this.symbol : null);
          break;

        case 5:
          this.exchange = in.readString(this.exchange instanceof Utf8 ? (Utf8)this.exchange : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










